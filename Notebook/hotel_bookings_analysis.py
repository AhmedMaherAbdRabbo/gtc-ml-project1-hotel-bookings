# -*- coding: utf-8 -*-
"""Hotel Bookings.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oYcFS_FRvpFvUmlh3nuH0xQY2gZe7Acs

## Import libraries and setup
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
import warnings
warnings.filterwarnings('ignore')

# Set plotting style
PRIMARY_COLOR = '#2E86AB'
SECONDARY_COLOR = '#A23B72'
ACCENT_COLOR = '#F18F01'
SUCCESS_COLOR = '#C73E1D'
NEUTRAL_COLOR = '#6C757D'
LIGHT_COLOR = '#E9ECEF'

COLOR_PALETTE = ['#2E86AB', '#A23B72', '#F18F01', '#C73E1D', '#6C757D',
                '#28A745', '#17A2B8', '#FFC107', '#DC3545', '#6F42C1']

sns.set_style("whitegrid")
sns.set_palette(COLOR_PALETTE)
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.facecolor'] = 'white'

"""## Data representation and loading"""

df = pd.read_csv('hotel_bookings.csv')

df.head()

df.sample(5)

df.tail()

print(f"Dataset Shape: {df.shape}")

df.info()

df.describe().T

df.dtypes

df.nunique()

"""## Check null values and missing data analysis"""

df.isna().sum()

missing_data = pd.DataFrame({'Column': df.columns,'Missing Count': df.isnull().sum()})
missing_data = missing_data[missing_data['Missing Count'] > 0]

missing_data

plt.figure(figsize=(15, 10))
plt.figure(figsize=(10, 6))
sns.heatmap(df.isnull(), cbar=True, yticklabels=False, cmap='viridis')
plt.title('Missing Values Heatmap')
plt.tight_layout()
plt.show()

df['children'].fillna(df['children'].mode()[0], inplace=True)

df['country'].fillna(df['country'].mode()[0], inplace=True)

df['agent'].fillna(0, inplace=True)
df['agent'] = df['agent'].astype(int)

df['company'].fillna(0, inplace=True)
df['company'] = df['company'].astype(int)

"""### Check"""

df.isnull().sum().sum()

plt.figure(figsize=(15, 10))
plt.figure(figsize=(10, 6))
sns.heatmap(df.isnull(), cbar=True, yticklabels=False, cmap='viridis')
plt.title('Missing Values Heatmap')
plt.tight_layout()
plt.show()

"""## Check duplicate records"""

df.duplicated().sum()

print(f"New dataset shape: {df.shape}")

df.drop_duplicates(inplace=True)

print(f"New dataset shape: {df.shape}")

"""## Check outliers using statistical methods"""

numerical_columns = ['lead_time', 'adr', 'stays_in_weekend_nights', 'stays_in_week_nights',
                    'adults', 'children', 'babies', 'previous_cancellations',
                    'previous_bookings_not_canceled', 'booking_changes',
                    'days_in_waiting_list', 'required_car_parking_spaces',
                    'total_of_special_requests']
existing_numerical_columns = [col for col in numerical_columns if col in df.columns]

outlier_summary = []

for col in existing_numerical_columns:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]

    outlier_summary.append({
        'Column': col,
        'Outliers_Count': len(outliers),
        'Outliers_Percentage': (len(outliers) / len(df)) * 100,
        'Lower_Bound': lower_bound,
        'Upper_Bound': upper_bound,
        'Min_Value': df[col].min(),
        'Max_Value': df[col].max()
    })

outlier_df = pd.DataFrame(outlier_summary)

outlier_df

plt.figure(figsize=(20, 15))
n_cols = 4
n_rows = (len(existing_numerical_columns) + n_cols - 1) // n_cols

for i, col in enumerate(existing_numerical_columns):
    plt.subplot(n_rows, n_cols, i + 1)
    sns.boxplot(y=df[col])
    plt.title(f'Outliers in {col}')
    plt.ylabel(col)

plt.tight_layout()
plt.show()

df = df[df['adr'] >= 0]
df = df[df['stays_in_weekend_nights'] >= 0]
df = df[df['stays_in_week_nights'] >= 0]

df.loc[df['adr'] > 1000, 'adr'] = 1000

print("ADR Min/Max:", df['adr'].min(), df['adr'].max())
print("Weekend Nights Min:", df['stays_in_weekend_nights'].min())
print("Week Nights Min:", df['stays_in_week_nights'].min())

"""## Fix data types and date formatting"""

df['arrival_date_month_num'] = pd.to_datetime(df['arrival_date_month'], format='%B').dt.month

df['arrival_date'] = pd.to_datetime(dict(
    year=df['arrival_date_year'],
    month=df['arrival_date_month_num'],
    day=df['arrival_date_day_of_month']
))

df.drop(columns=['arrival_date_month_num'], inplace=True)

print(df[['arrival_date_year','arrival_date_month','arrival_date_day_of_month','arrival_date']].head())

boolean_columns = ['is_canceled', 'is_repeated_guest']
for col in boolean_columns:
    if col in df.columns:
        df[col] = df[col].astype(int)
        print(f"{col}: Converted to integer (0/1)")

"""## Exploratory data analysis (EDA)

### Booking Status Analysis
"""

cancellation_counts = df['is_canceled'].value_counts()
cancellation_rate = (cancellation_counts[1] / len(df)) * 100
cancellation_rate

plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='is_canceled')
plt.title('Booking Cancellation Distribution')
plt.xlabel('Canceled (0: No, 1: Yes)')
plt.ylabel('Count')
plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 4))
df['is_canceled'].value_counts().plot.pie(
    autopct='%1.1f%%',
    labels=['Not Canceled', 'Canceled'],
    colors=['#2E86AB', '#A23B72']
)
plt.title('Cancellation Rate')
plt.ylabel('')
plt.tight_layout()
plt.show()

"""### Hotel Type Analysis"""

hotel_counts = df['hotel'].value_counts()
hotel_counts

plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='hotel')
plt.title('Distribution by Hotel Type')
plt.xlabel('Hotel Type')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='hotel', hue='is_canceled', palette=['#2E86AB', '#C73E1D'])
plt.title('Cancellation by Hotel Type')
plt.xlabel('Hotel Type')
plt.ylabel('Count')
plt.legend(title='Canceled', labels=['No', 'Yes'])
plt.tight_layout()
plt.show()

"""### Temporal Analysis"""

monthly_bookings = df['arrival_date_month'].value_counts()
monthly_bookings

plt.figure(figsize=(8, 5))
month_order = ['January', 'February', 'March', 'April', 'May', 'June',
               'July', 'August', 'September', 'October', 'November', 'December']
sns.countplot(data=df, x='arrival_date_month', order=month_order)
plt.title('Bookings by Month')
plt.xlabel('Month')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='arrival_date_year')
plt.title('Bookings by Year')
plt.xlabel('Year')
plt.ylabel('Count')
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='arrival_date_week_number')
plt.title('Bookings by Week Number')
plt.xlabel('Week Number')
plt.ylabel('Count')
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='arrival_date_day_of_month')
plt.title('Bookings by Day of Month')
plt.xlabel('Day of Month')
plt.ylabel('Count')
plt.tight_layout()
plt.show()

"""### Guest Demographics Analysis"""

plt.figure(figsize=(6, 4))
sns.histplot(df['adults'], bins=20, kde=True)
plt.title('Distribution of Adults per Booking')
plt.xlabel('Number of Adults')
plt.tight_layout()
plt.show()

top_countries = df['country'].value_counts().head(10)
top_countries

plt.figure(figsize=(8, 5))
sns.barplot(x=top_countries.values, y=top_countries.index, palette='viridis')
plt.title('Top 10 Countries by Bookings')
plt.xlabel('Number of Bookings')
plt.ylabel('Country')
plt.tight_layout()
plt.show()

"""### Booking Behavior Analysis"""

plt.figure(figsize=(8, 5))
sns.histplot(df['lead_time'], bins=50, kde=True)
plt.title('Lead Time Distribution')
plt.xlabel('Lead Time (days)')
plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 4))
sns.boxplot(data=df, x='is_canceled', y='lead_time')
plt.title('Lead Time vs Cancellation')
plt.xlabel('Canceled')
plt.ylabel('Lead Time (days)')
plt.tight_layout()
plt.show()

df['total_nights'] = df['stays_in_weekend_nights'] + df['stays_in_week_nights']

plt.figure(figsize=(8, 5))
sns.histplot(df['total_nights'], bins=30, kde=True)
plt.title('Total Stay Duration Distribution')
plt.xlabel('Total Nights')
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 5))
sns.scatterplot(data=df, x='lead_time', y='total_nights', alpha=0.5)
plt.title('Lead Time vs Stay Duration')
plt.xlabel('Lead Time (days)')
plt.ylabel('Total Nights')
plt.tight_layout()
plt.show()

"""### Pricing Analysis (ADR)"""

adr_stats = df['adr'].describe()
adr_stats

plt.figure(figsize=(8, 5))
sns.histplot(df['adr'], bins=50, kde=True)
plt.title('ADR Distribution')
plt.xlabel('Average Daily Rate (ADR)')
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 5))
sns.boxplot(data=df, x='hotel', y='adr')
plt.title('ADR by Hotel Type')
plt.xlabel('Hotel Type')
plt.ylabel('ADR')
plt.tight_layout()
plt.show()

monthly_adr = df.groupby('arrival_date_month')['adr'].mean()
month_order = ['January', 'February', 'March', 'April', 'May', 'June',
               'July', 'August', 'September', 'October', 'November', 'December']
monthly_adr = monthly_adr.reindex(month_order)

plt.figure(figsize=(10, 5))
plt.plot(range(len(monthly_adr)), monthly_adr.values, marker='o')
plt.title('Average ADR by Month')
plt.xlabel('Month')
plt.ylabel('Average ADR')
plt.xticks(range(len(month_order)), month_order, rotation=45)
plt.tight_layout()
plt.show()

"""### Market Segment Analysis"""

market_segment_counts = df['market_segment'].value_counts()
market_segment_counts

plt.figure(figsize=(10, 6))
sns.countplot(data=df, y='market_segment', order=market_segment_counts.index)
plt.title('Bookings by Market Segment')
plt.xlabel('Count')
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(data=df, x='market_segment', y='adr')
plt.title('ADR by Market Segment')
plt.xlabel('Market Segment')
plt.ylabel('ADR')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

segment_cancellation = df.groupby('market_segment')['is_canceled'].mean().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x=segment_cancellation.values, y=segment_cancellation.index)
plt.title('Cancellation Rate by Market Segment')
plt.xlabel('Cancellation Rate')
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='market_segment', hue='hotel')
plt.title('Market Segment by Hotel Type')
plt.xlabel('Market Segment')
plt.xticks(rotation=45)
plt.legend(title='Hotel Type')
plt.tight_layout()
plt.show()

"""### Distribution Channel Analysis"""

channel_counts = df['distribution_channel'].value_counts()
channel_counts

plt.figure(figsize=(10, 6))
sns.countplot(data=df, y='distribution_channel', order=channel_counts.index)
plt.title('Bookings by Distribution Channel')
plt.xlabel('Count')
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(data=df, x='distribution_channel', y='adr')
plt.title('ADR by Distribution Channel')
plt.xlabel('Distribution Channel')
plt.ylabel('ADR')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

channel_cancellation = df.groupby('distribution_channel')['is_canceled'].mean().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x=channel_cancellation.values, y=channel_cancellation.index)
plt.title('Cancellation Rate by Distribution Channel')
plt.xlabel('Cancellation Rate')
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='distribution_channel', hue='is_canceled')
plt.title('Channel vs Cancellation')
plt.xlabel('Distribution Channel')
plt.xticks(rotation=45)
plt.legend(title='Canceled', labels=['No', 'Yes'])
plt.tight_layout()
plt.show()

"""### Customer Type and Loyalty Analysis"""

customer_type_counts = df['customer_type'].value_counts()
repeat_guest_rate = df['is_repeated_guest'].mean() * 100

customer_type_counts

plt.figure(figsize=(8, 6))
sns.countplot(data=df, y='customer_type', order=customer_type_counts.index)
plt.title('Customer Type Distribution')
plt.xlabel('Count')
plt.tight_layout()
plt.show()

repeat_guest_rate = df['is_repeated_guest'].mean() * 100
print(f"Repeat Guest Rate: {repeat_guest_rate:.2f}%")

plt.figure(figsize=(6, 5))
sns.countplot(data=df, x='is_repeated_guest')
plt.title(f'Repeat Guests\n({repeat_guest_rate:.1f}% repeat)')
plt.xlabel('Repeated Guest (0: No, 1: Yes)')
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(data=df, x='is_repeated_guest', y='adr')
plt.title('ADR: New vs Repeat Guests')
plt.xlabel('Repeated Guest (0: No, 1: Yes)')
plt.ylabel('ADR')
plt.tight_layout()
plt.show()

"""### Correlation Analysis"""

numerical_cols = ['lead_time', 'arrival_date_year', 'stays_in_weekend_nights',
                  'stays_in_week_nights', 'adults', 'children', 'babies',
                  'is_repeated_guest', 'previous_cancellations',
                  'previous_bookings_not_canceled', 'booking_changes',
                  'days_in_waiting_list', 'adr', 'required_car_parking_spaces',
                  'total_of_special_requests', 'is_canceled']

correlation_matrix = df[numerical_cols].corr()

plt.figure(figsize=(14, 12))
sns.heatmap(correlation_matrix,
            annot=True,
            cmap='RdBu_r',
            center=0,
            square=True,
            cbar_kws={'shrink': .8})
plt.title('Correlation Matrix - Hotel Bookings', fontsize=16, pad=20)
plt.tight_layout()
plt.show()

"""## Feature engineering for enhanced model performance"""

# 1. Total guests
if all(col in df.columns for col in ['adults', 'children', 'babies']):
    df['total_guests'] = df['adults'] + df['children'] + df['babies']
    print("Created 'total_guests' = adults + children + babies")

# 2. Total nights
if all(col in df.columns for col in ['stays_in_weekend_nights', 'stays_in_week_nights']):
    df['total_nights'] = df['stays_in_weekend_nights'] + df['stays_in_week_nights']
    print("Created 'total_nights' = weekend_nights + week_nights")

# 3. Is family (binary flag)
if 'children' in df.columns and 'babies' in df.columns:
    df['is_family'] = ((df['children'] > 0) | (df['babies'] > 0)).astype(int)
    print("Created 'is_family' binary flag (1 if children or babies > 0)")

"""## Data leakage removal"""

df.drop(columns=['reservation_status', 'reservation_status_date'], inplace=True)

"""# Encode categorical variables for machine learning"""

categorical_columns = df.select_dtypes(include=['object']).columns.tolist()
print(f"Found {len(categorical_columns)} categorical columns")

low_cardinality_threshold = 10
low_cardinality_cols = []
high_cardinality_cols = []

for col in categorical_columns:
    unique_values = df[col].nunique()
    if unique_values <= low_cardinality_threshold:
        low_cardinality_cols.append(col)
    else:
        high_cardinality_cols.append(col)

print(f"Low-cardinality columns (≤{low_cardinality_threshold} unique values): {low_cardinality_cols}")
print(f"High-cardinality columns (>{low_cardinality_threshold} unique values): {high_cardinality_cols}")

if low_cardinality_cols:
    df_encoded = pd.get_dummies(df, columns=low_cardinality_cols, prefix=low_cardinality_cols)
    print(f"Applied One-Hot Encoding to {len(low_cardinality_cols)} columns")
else:
    df_encoded = df.copy()

for col in high_cardinality_cols:
    if col in df_encoded.columns:
        freq_encoding = df_encoded[col].value_counts().to_dict()
        df_encoded[f'{col}_frequency'] = df_encoded[col].map(freq_encoding)

        value_counts = df_encoded[col].value_counts()
        frequent_categories = value_counts[value_counts >= 50].index.tolist()
        df_encoded[f'{col}_grouped'] = df_encoded[col].apply(
            lambda x: x if x in frequent_categories else 'Other'
        )

        print(f"{col}: Applied frequency encoding and grouped rare categories")

print(f"Final encoded dataset shape: {df_encoded.shape}")

"""##Train-test split for model validation

"""

X = df_encoded.drop('is_canceled', axis=1)
y = df_encoded['is_canceled']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print(f"Training set shape: {X_train.shape}")
print(f"Testing set shape: {X_test.shape}")

"""## Save cleaned data for future use"""

df_encoded.to_csv("hotel_bookings_cleaned.csv", index=False)
print("Cleaned dataset saved as 'hotel_bookings_cleaned.csv'")

X_train.to_csv("X_train.csv", index=False)
X_test.to_csv("X_test.csv", index=False)
y_train.to_csv("y_train.csv", index=False)
y_test.to_csv("y_test.csv", index=False)

print("Train/Test splits saved (X_train, X_test, y_train, y_test)")

